
//* We use JDBC to make the connection, this is all the bits inside the "db{}". The url is just the typical url for JDBC. We need to specifiy the database name twice, once in the url which is the ACTUAL db name and once in the config which is the app refers to this config as.
//* As JDBC can connect to many different DBs we need to pass it a driver for our chossen flavour, e.g. postgres.
//* When setting postgres up the for the first time we decided on this user/password so we pass these in now.
//* We also use Slick. Like JDBC slick can be used with mutliple different DBs, so we also pass in a driver for postgres.
//* Slick vs JDBC. JDBC is rarley used alone, most of the time it just provides the DB connection. If you were to use JDBC alone what we'd be doing would be to make strings of SQL queries, send them off to the DB in a try-catch and hopfully recieve back some kind of iterator. Not pleasent. As we'll see Slick allows us to manipulte the DB tables as if they're scala collections.
//slick.dbs {
//  charlie {
//    profile = "slick.jdbc.PostgresProfile$"
//    db {
//      driver = "org.postgresql.Driver"
//      url = "jdbc:postgresql://localhost/charlie"
//      user = "root"
//      password = "password"
//    }
//  }
//}

//* We can use H2 as an embedded database, to do this we need to replace the Postgres driver with H2 and change the url to tell H2 what we want. H2 can pretend to be multiple different databases so we tell JDBC we're using H2 and then tell H2 that we want it to pretend to be Postgres.
//* We don't have to change the Slick profile as H2 is going pretend to be a Postgres database.
slick.dbs {
  charlie {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      driver = "org.h2.Driver"
      url = "jdbc:h2:mem:play;MODE=PostgreSQL"
    }
  }
}

//* Once we have the Evolutions dependency it is activated by default. However to be specific we set it to true in the config.
play.evolutions.enabled=false